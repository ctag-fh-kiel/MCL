/* Copyright 2018, Justin Mammarella jmamma@gmail.com */
#include "MDExploit.h"

void MDExploit::setup() {}
void MDExploit::setup_global(uint8_t global_num) {
  /** Original position of the global inside the MD (0 to 7). **/
  if (global_num == 0) {
    global_one.origPosition = 6;
  } else {
    global_one.origPosition = 7;
  }
  /** Stores the audio output for each track. **/

  for (uint8_t track_n = 0; track_n < 16; track_n++) {
    if (IS_BIT_SET32(cfg.cues, track_n)) {
      global_one.drumRouting[track_n] = 5;
    } else {
      global_one.drumRouting[track_n] = 6;
    }
  }

  // baseChannel
  // -- 0
  // 1-4 1
  // 5-8 2
  // 9-12 3
  // 13-16 4

  /** The MIDI base channel of the MachineDrum. **/
  if (global_num == 0) {
    global_one.baseChannel = 3;
  } else {
    global_one.baseChannel = 9;
  }

  global_one.extendedMode = true;
  if (MidiClock.mode == MidiClock.EXTERNAL_MIDI) {
    global_one.clockIn = false;
    global_one.clockOut = true;
  } else {
    global_one.clockIn = true;
    global_one.clockOut = false;
  }
  global_one.transportIn = true;
  // some bug
  global_one.transportOut = true;
  global_one.localOn = 1;
  global_one.programChange = 2;
}
void MDExploit::send_globals() {
  if (rec_global) {
    ElektronDataToSysexEncoder encoder(&MidiUart);
    ElektronDataToSysexEncoder encoder2(&MidiUart);
    setup_global(0);
    in_sysex = 1;
    global_one.toSysex(encoder);
    setup_global(1);
    global_one.toSysex(encoder2);
    in_sysex = 0;
  }
}

void MDExploit::switch_global(uint8_t global_page) {

  uint8_t data[] = {0x56, (uint8_t)global_page & 0x7F};
  in_sysex = 1;
  MD.sendSysex(data, countof(data));
  in_sysex = 0;
}
void MDExploit::init_notes() {
  for (uint8_t i = 0; i < 20; i++) {
    notes[i] = 0;
    // notes_off[i] = 0;
  }
}
void MDExploit::on() {
  // DEBUG_PRINTLN("Exploit on");
  //  DEBUG_PRINTLN(slowclock);

  // in_sysex = 1;
  note_proceed = false;
  if (state) {
    start_clock = slowclock;
    return;
  }
  state = true;
  // last_md_track = MD.getCurrentTrack(CALLBACK_TIMEOUT);
  last_md_track = MD.currentTrack;
  MD.setStatus(0x22, 15);
  // MD.getBlockingGlobal(0);
  init_notes();

  /*if (MidiClock.state == 2) {

    div16th_last = MidiClock.div16th_counter;
    noteproceed = 0;
    }
    else {
    noteproceed = 1;
    }
  */
  notecount = 0;
  //   global_new.baseChannel = 9;
  //  ElektronDataToSysexEncoder encoder(&MidiUart);
  //   global_new.toSysex(encoder);
  //    MD.setTempo(MidiClock.tempo);

  int flag = 0;

  //     if ((MidiClock.state == 2) && (MidiClock.mode ==
  //     MidiClock.EXTERNAL_UART2)) {
  if ((MidiClock.state == 2) && (MidiClock.mode == MidiClock.EXTERNAL_UART2)) {
    flag = 1;
  }

  if (flag == 1) {
    MidiUart.m_putc_immediate(MIDI_STOP);
  }
  //   }

  MD.global.baseChannel = 4;

  switch_global(6);

  //     if ((MidiClock.state == 2) &&  (MidiClock.mode ==
  //     MidiClock.EXTERNAL_UART2)) {
  if (flag == 1) {
    MidiUart.m_putc_immediate(MIDI_CONTINUE);
  }
  //    }
  //  MD.getBlockingStatus(MD_CURRENT_GLOBAL_SLOT_REQUEST,200);
  start_clock = slowclock;

  // collect_trigs = true;
  // in_sysex = 0;
}
void MDExploit::off() {
  note_proceed = false;
  // DEBUG_PRINTLN("Exploit off");
  //     DEBUG_PRINTLN(slowclock);
  // in_sysex = 1;
  if (!state) {
    return;
  }
  collect_trigs = false;

  //
  //  global_new.tempo = MidiClock.tempo;
  //   global_new.baseChannel = 3;
  //    ElektronDataToSysexEncoder encoder(&MidiUart);
  //   global_new.toSysex(encoder);
  int flag = 0;
  if ((MidiClock.state == 2) && (MidiClock.mode == MidiClock.EXTERNAL_UART2)) {
    flag = 1;
  }
  if (flag == 1) {
    MidiUart.m_putc_immediate(MIDI_STOP);
  }
  //   }
  MD.global.baseChannel = 9;

  switch_global(7);
  //    if ((MidiClock.state == 2) && (MidiClock.mode ==
  //    MidiClock.EXTERNAL_UART2)) {
  if (flag == 1) {
    MidiUart.m_putc_immediate(MIDI_CONTINUE);
  }
  //   }
  if (cur_col < 16) {
    MD.setStatus(0x22, cur_col);

  } else {
    MD.setStatus(0x22, last_md_track);
  }
  state = false;

  // in_sysex = 0;
}

void MDExploitCallbacks::setup() {
  MidiClock.addOnMidiStartCallback(
      this, (midi_clock_callback_ptr_t)&TrigInterface::onMidiStartCallback);
  MidiClock.addOnMidiContinueCallback(
      this, (midi_clock_callback_ptr_t)&TrigInterface::onMidiStartCallback);
};
void MDExploitCallbacks::onMidiStartCallback() {
  //     if ((curpage == S_PAGE) || (curpage == W_PAGE) || (curpage == CUE_PAGE)
  //     || (curpage == MIXER_PAGE)) {
  exploit_start_clock = slowclock;
  md_exploit.note_proceed = false;
  // }
  pattern_start_clock32th = 0;
}

MDExploitCallbacks md_exploit_callbacks;
MDExploit md_exploit;
