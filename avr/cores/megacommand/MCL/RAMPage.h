/* Justin Mammarella jmamma@gmail.com 2018 */

#ifndef RAMPAGE_H__
#define RAMPAGE_H__

#include "GUI.h"
#include "MCLEncoder.h"

#define SLOT_RAM_RECORD (1 << (sizeof(GridChain::row) * 8)) - 1 - 1
#define SLOT_RAM_PLAY (1 << (sizeof(GridChain::row) * 8)) - 1 - 2

// 'wheel top', 21x21px
const unsigned char wheel_top[] PROGMEM = { 
    0x01, 0xfc, 0x00, 0x06, 0x03, 0x00, 0x08, 0xf8, 0x80, 0x10, 0xf8,
    0x40, 0x20, 0xf8, 0x20, 0x40, 0x70, 0x10, 0x40, 0x70, 0x10, 0x80,
    0x20, 0x08, 0x80, 0x00, 0x08, 0x80, 0x20, 0x08, 0x80, 0x50, 0x08,
    0x80, 0x20, 0x08, 0x83, 0x8e, 0x08, 0xcf, 0x8f, 0x88, 0x5f, 0x8f,
    0xd0, 0x4f, 0x07, 0x90, 0x27, 0x07, 0x20, 0x12, 0x04, 0x40, 0x08,
    0x00, 0x80, 0x06, 0x03, 0x00, 0x01, 0xfc, 0x00};
// 'wheel angle', 21x21px
const unsigned char wheel_angle[] PROGMEM = { 
    0x01, 0xfc, 0x00, 0x06, 0x03, 0x00, 0x08, 0x00, 0x80, 0x10, 0x02,
    0x40, 0x20, 0x07, 0x20, 0x40, 0x07, 0x90, 0x40, 0x0f, 0xd0, 0x80,
    0x0f, 0x88, 0xb8, 0x0e, 0x08, 0xbe, 0x20, 0x08, 0xbf, 0x50, 0x08,
    0xbe, 0x20, 0x08, 0xb8, 0x00, 0x08, 0x80, 0x20, 0x08, 0x40, 0x70,
    0x10, 0x40, 0x70, 0x10, 0x20, 0xf8, 0x20, 0x10, 0xf8, 0x40, 0x08,
    0xf8, 0x80, 0x06, 0x03, 0x00, 0x01, 0xfc, 0x00};
// 'wheel side', 21x21px
const unsigned char wheel_side[] PROGMEM = { 
    0x01, 0xfc, 0x00, 0x06, 0x03, 0x00, 0x08, 0x00, 0x80, 0x12, 0x00,
    0x40, 0x27, 0x00, 0x20, 0x4f, 0x00, 0x10, 0x5f, 0x80, 0x10, 0x8f,
    0x80, 0x08, 0x83, 0x80, 0xe8, 0x80, 0x23, 0xe8, 0x80, 0x57, 0xe8,
    0x80, 0x23, 0xe8, 0x83, 0x80, 0xe8, 0x8f, 0x80, 0x08, 0x5f, 0x80,
    0x10, 0x4f, 0x00, 0x10, 0x27, 0x00, 0x20, 0x12, 0x00, 0x40, 0x08,
    0x00, 0x80, 0x06, 0x03, 0x00, 0x01, 0xfc, 0x00};

class RAMPage : public LightPage, MidiCallback {
public:
  RAMPage(uint8_t _page_id, Encoder *e1 = NULL, Encoder *e2 = NULL,
          Encoder *e3 = NULL, Encoder *e4 = NULL)
      : LightPage(e1, e2, e3, e4) {
    page_id = _page_id;
    if (page_id == 0) {
      track1 = 15;
      track2 = 14;
    }
  }

  bool handleEvent(gui_event_t *event);
  bool midi_state = false;
  uint8_t magic;
  uint8_t rec_state;
  uint8_t track1;
  uint8_t track2;
  uint8_t page_id;
  uint16_t transition_step;
  uint8_t record_len;

  uint8_t wheel_spin;
  uint16_t wheel_spin_last_clock;
  void display();
  void setup();
  void init();
  void loop();
  void cleanup();
  void setup_ram_rec(uint8_t track, uint8_t model, uint8_t mlev, uint8_t len,
                     uint8_t rate, uint8_t pan, uint8_t linked_track = 255);
  void setup_ram_rec_mono(uint8_t track, uint8_t mlev, uint8_t len,
                          uint8_t rate);
  void setup_ram_rec_stereo(uint8_t track, uint8_t mlev, uint8_t len,
                            uint8_t rate);
  void setup_ram_play(uint8_t track, uint8_t model, uint8_t pan,
                      uint8_t linked_track = 255);

  void setup_ram_play_mono(uint8_t track);
  void setup_ram_play_stereo(uint8_t track);

  void reverse(uint8_t track);
  bool slice(uint8_t track, uint8_t linked_track);
  void setup_sequencer(uint8_t track);

  void setup_callbacks();
  void remove_callbacks();

  void onControlChangeCallback_Midi(uint8_t *msg);
};

extern MCLEncoder ram_a_param1;
extern MCLEncoder ram_a_param2;
extern MCLEncoder ram_a_param3;
extern MCLEncoder ram_a_param4;

extern MCLEncoder ram_b_param1;
extern MCLEncoder ram_b_param2;
extern MCLEncoder ram_b_param3;
extern MCLEncoder ram_b_param4;

#endif /* RAMPAGE_H__ */
